<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        rkJggg==
</value>
  </data>
</root>