================================================================================================================================
To Implement/Bugs/Notes:
================================================================================================================================
-- remember open files across sessions
-- erring out when passing Array values to FmPerform (investigate; not pre-blocking?)
-- implement switch() statement (very simple if...elseif...else replacement)
-- it seems some field names can't be used as variables (try passing variable named "card" by reference to a procedure (we throw uncaught string error))
   we appear to be resolving top-level records without : or . modifiers. which are needed sometimes, should this be the rule??
   i think so, symitar/repgen doesn't allow these names. but we do need some form of error checking as opposed to just crashing
-- partial rewrite, consolidate methods used for Reference/Array variables (esp. in Context Frames, if viable)
-- Loading SymProcedures/SymVariables/RecordNames from description files (clean up source, and prepare for autocomplete/description loading...) {IDE?}
-- Better Error Catching
		A lot of parsing/generating errors are crashing apps due to bad array indicies
		need to abort early on errFlags, and push some try{}catch{} blocks
-- AnyWarning/AnyService
-- Nested Any/NotAny (right now their body/2nd block only supports expressions)
-- Bitwise operators (basically just a std lib, but requires built-in scanner/parser/generator support for operators)
-- inline array definition @ declaration (char newArr[3] = ["hello", "pwrplus", "world"];)
================================================================================================================================
Look Into:
================================================================================================================================
-- any more of RepGen's crazy array of FOR blocks
	we've got FOR EACH RECORD, FOR EACH RECORD WITH CONDITION, FOR RECORD PRIMID, FOR RECORD WITH RECORD PRIMID, ...???
================================================================================================================================
Unfeasible:
================================================================================================================================
-- break command in conditionals
	without a proper jump instruction, we would have to resort to checking for a break condition at every single statement in the conditional's body
-- early return from procedures
  this is basically the same situation as the break command
================================================================================================================================
Completed:
================================================================================================================================
-- Specfile Type Designators -- using MODE() RootProcedure
-- Passing-by-Reference (&data) -- this is implemented, define procedure parameters as "TYPE &NAME" for reference, limitation of no user variables beginning with "PWRPLUSREF"
-- Increment/Decrement (++/--) operators -- this made some SymbolType splits Unary->PreUnary/PostUnary && Assignment->AssignBlock/PostUnary
-- DataFiles -- implemented via DATAFILE Root Procedure
-- Headers/Trailers : Header("char_literal") and Headers...END/Trailers...END -- implemented via HEADERBLOCK & TRAILERBLOCK in Parser/Generator
-- FMPerform/TranPerform (these will have some the non-array-passing parameters) -- A bit messy, but definitely working!
-- Arrays -- also array reference passing into procedures (procedures cannot return arrays though, stack craziness would ensue)
-- #Import -- using preprocessor and external loading callback
-- line comments ("//") inside char literals (url = "http://test.url";) are now treated as strings, not comments.
